{"version":3,"sources":["card/Card.js","card/Cardlist.js","Searchbox.js","robots.js","errorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","holdup","onChange","type","placeholder","username","ErrorBoundry","state","hasError","error","info","this","setState","console","log","children","Component","App","Holdup","e","searchfield","target","value","filteredRobots","filter","search","toLocaleLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAoBeA,MAjBf,SAAcC,GAAO,IACVC,EAAgBD,EAAhBC,KAAKC,EAAWF,EAAXE,MAAMC,EAAKH,EAALG,GAClB,OAEA,yBAAKC,UAAU,kDACX,yBAAKA,UAAU,qBAAqBC,IAAG,+BAA0BF,EAA1B,4BAAwDG,IAAI,UACnG,6BACI,4BAAKL,GACP,gCAAMC,MCWDK,EAnBE,SAAAP,GAAU,IACjBQ,EAAWR,EAAXQ,OAER,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEdW,EAdG,SAAAb,GAAU,IAClBc,EAAWd,EAAXc,OACR,OACE,yBAAKV,UAAU,QACb,2BACEW,SAAUD,EACVV,UAAU,yBACVY,KAAK,SACLC,YAAY,mBCVPT,G,MAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNiB,SAAU,OACVhB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNiB,SAAU,YACVhB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNiB,SAAU,WACVhB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNiB,SAAU,WACVhB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNiB,SAAU,SACVhB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNiB,SAAU,mBACVhB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNiB,SAAU,eACVhB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNiB,SAAU,gBACVhB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNiB,SAAU,WACVhB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNiB,SAAU,iBACVhB,MAAO,4BCnCIiB,G,kBArBb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,IAC1BK,QAAQC,IAAR,gBAAqBL,EAArB,iBAAmCC,M,+BAInC,OAAIC,KAAKJ,MAAMC,SACN,8DAEAG,KAAKxB,MAAM4B,a,GAjBGC,cCyCZC,E,YAjCb,aAAe,IAAD,8BACZ,+CAOFC,OAAS,SAAAC,GACP,EAAKP,SAAS,CACZQ,YAAaD,EAAEE,OAAOC,SARxB,EAAKf,MAAQ,CACXZ,OAAQA,EACRyB,YAAa,IAJH,E,sEAcJ,IAAD,OACDG,EAAiBZ,KAAKJ,MAAMZ,OAAO6B,QAAO,SAAAC,GAC9C,OAAOA,EAAOrC,KACXsC,oBACAC,SAAS,EAAKpB,MAAMa,YAAYM,wBAErC,OACE,yBAAKnC,UAAU,KACb,wBAAIA,UAAU,QAAd,eAEA,kBAAC,EAAD,CAAWU,OAAQU,KAAKO,SACxB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUvB,OAAQ4B,U,GA3BVP,aCGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXLC,IAASC,OAAQ,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26b551e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nfunction Card(props){\r\n    const {name,email,id}= props;\r\n    return(\r\n        \r\n    <div className=\" bg-light-green green tc  dib grow br3 pa2 ma2\">\r\n        <img className=\"bb b--white-90 ma1\" src={`https://robohash.org/${id}/bgset_bg1/?size=200x200`} alt=\"robot\"/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n          <p>  {email}</p>\r\n        </div>\r\n    </div>\r\n    \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = props => {\r\n  const { robots } = props;\r\n\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = props => {\r\n  const { holdup } = props;\r\n  return (\r\n    <div className=\" pa2\">\r\n      <input\r\n        onChange={holdup}\r\n        className=\" pa3 ba bg-light-green\"\r\n        type=\"search\"\r\n        placeholder=\"serch robots\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n    console.log(`error ${error} info ${info}`);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>oops! there is something wrong</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"./card/Cardlist\";\r\nimport SearchBox from \"./Searchbox\";\r\nimport \"./App.css\";\r\nimport { robots } from \"./robots\";\r\nimport \"tachyons\";\r\nimport ErrorBoundry from \"./errorBoundry\";\r\n// import { rootCertificates } from 'tls';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: robots,\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  Holdup = e => {\r\n    this.setState({\r\n      searchfield: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(search => {\r\n      return search.name\r\n        .toLocaleLowerCase()\r\n        .includes(this.state.searchfield.toLocaleLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"t\">\r\n        <h1 className=\"f2  \">RoboFriends</h1>\r\n\r\n        <SearchBox holdup={this.Holdup} />\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n import App from './App';\r\n \r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n ReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}